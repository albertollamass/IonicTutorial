{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Camera, CameraResultType, CameraSource } from \"@capacitor/camera\";\nimport { Directory } from \"@capacitor/filesystem\";\nexport function usePhotoGallery() {\n  _s();\n\n  const [photos, setPhotos] = useState([]);\n\n  const takePhoto = async () => {\n    const cameraPhoto = await Camera.getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n    const fileName = new Date().getTime() + '.jpeg';\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    const newPhotos = [savedFileImage, ...photos];\n    setPhotos(newPhotos);\n  };\n\n  const savePicture = async (photo, fileName) => {\n    const base64Data = await base64FromPath(photo.webPath);\n    const savedFile = await FileSystem.writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: Directory.Data\n    });\n  };\n\n  return {\n    filepath: fileName,\n    webviewPath: photo.webPath\n  };\n  return {\n    photos,\n    takePhoto\n  };\n}\n\n_s(usePhotoGallery, \"S1/H7s/HYZ8eyl0DtDgy+0vpWeU=\");\n\nexport async function base64FromPath(path) {\n  const response = await fetch(path);\n  const blob = await response.blob();\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onerror = reject;\n\n    reader.onload = () => {\n      if (typeof reader.result === 'string') {\n        resolve(reader.result);\n      } else {\n        reject('method did not return a string');\n      }\n    };\n\n    reader.readAsDataURL(blob);\n  });\n}","map":{"version":3,"sources":["/Users/albertollamasgonzalez/Desktop/Learn X the Hard Way/ionic/photo-gallery/src/hooks/usePhotoGallery.ts"],"names":["useState","Camera","CameraResultType","CameraSource","Directory","usePhotoGallery","photos","setPhotos","takePhoto","cameraPhoto","getPhoto","resultType","Uri","source","quality","fileName","Date","getTime","savedFileImage","savePicture","newPhotos","photo","base64Data","base64FromPath","webPath","savedFile","FileSystem","writeFile","path","data","directory","Data","filepath","webviewPath","response","fetch","blob","Promise","resolve","reject","reader","FileReader","onerror","onload","result","readAsDataURL"],"mappings":";;AAAA,SAASA,QAAT,QAAoC,OAApC;AAGA,SACIC,MADJ,EAEIC,gBAFJ,EAGIC,YAHJ,QAKO,mBALP;AAMA,SAAqBC,SAArB,QAAsC,uBAAtC;AAIA,OAAO,SAASC,eAAT,GAA2B;AAAA;;AAC9B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAc,EAAd,CAApC;;AACA,QAAMQ,SAAS,GAAG,YAAY;AAC1B,UAAMC,WAAW,GAAG,MAAMR,MAAM,CAACS,QAAP,CAAgB;AACxCC,MAAAA,UAAU,EAAET,gBAAgB,CAACU,GADW;AAExCC,MAAAA,MAAM,EAAEV,YAAY,CAACF,MAFmB;AAGxCa,MAAAA,OAAO,EAAE;AAH+B,KAAhB,CAA1B;AAMA,UAAMC,QAAQ,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,OAAxC;AACA,UAAMC,cAAc,GAAG,MAAMC,WAAW,CAACV,WAAD,EAAcM,QAAd,CAAxC;AACA,UAAMK,SAAS,GAAG,CAACF,cAAD,EAAiB,GAAGZ,MAApB,CAAlB;AACAC,IAAAA,SAAS,CAACa,SAAD,CAAT;AACD,GAXH;;AAYE,QAAMD,WAAW,GAAG,OAAOE,KAAP,EAA2BN,QAA3B,KAAgE;AAClF,UAAMO,UAAU,GAAG,MAAMC,cAAc,CAACF,KAAK,CAACG,OAAP,CAAvC;AACA,UAAMC,SAAS,GAAG,MAAMC,UAAU,CAACC,SAAX,CAAqB;AAC3CC,MAAAA,IAAI,EAAEb,QADqC;AAE3Cc,MAAAA,IAAI,EAAEP,UAFqC;AAG3CQ,MAAAA,SAAS,EAAE1B,SAAS,CAAC2B;AAHsB,KAArB,CAAxB;AAMH,GARC;;AASF,SAAO;AACHC,IAAAA,QAAQ,EAAEjB,QADP;AAEHkB,IAAAA,WAAW,EAAEZ,KAAK,CAACG;AAFhB,GAAP;AAKA,SAAO;AACHlB,IAAAA,MADG;AAEHE,IAAAA;AAFG,GAAP;AAIH;;GAhCeH,e;;AAkChB,OAAO,eAAekB,cAAf,CAA8BK,IAA9B,EAA6D;AAChE,QAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACP,IAAD,CAA5B;AACA,QAAMQ,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;AACA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,IAAAA,MAAM,CAACE,OAAP,GAAiBH,MAAjB;;AACAC,IAAAA,MAAM,CAACG,MAAP,GAAgB,MAAM;AACpB,UAAI,OAAOH,MAAM,CAACI,MAAd,KAAyB,QAA7B,EAAuC;AACrCN,QAAAA,OAAO,CAACE,MAAM,CAACI,MAAR,CAAP;AACD,OAFD,MAEO;AACLL,QAAAA,MAAM,CAAC,gCAAD,CAAN;AACD;AACF,KAND;;AAOAC,IAAAA,MAAM,CAACK,aAAP,CAAqBT,IAArB;AACD,GAXM,CAAP;AAYH","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { isPlatform } from \"@ionic/react\";\n\nimport {\n    Camera,\n    CameraResultType,\n    CameraSource,\n    Photo,\n} from \"@capacitor/camera\";\nimport { Filesystem, Directory } from \"@capacitor/filesystem\";\nimport { Storage } from \"@capacitor/storage\";\nimport { Capacitor } from \"@capacitor/core\";\n\nexport function usePhotoGallery() {\n    const [photos, setPhotos] = useState<UserPhoto[]>([]);\n    const takePhoto = async () => {\n        const cameraPhoto = await Camera.getPhoto({\n          resultType: CameraResultType.Uri,\n          source: CameraSource.Camera,\n          quality: 100\n        });\n      \n        const fileName = new Date().getTime() + '.jpeg';\n        const savedFileImage = await savePicture(cameraPhoto, fileName);\n        const newPhotos = [savedFileImage, ...photos];\n        setPhotos(newPhotos);\n      };\n      const savePicture = async (photo: cameraPhoto, fileName: string): Promise<Photo> => {\n        const base64Data = await base64FromPath(photo.webPath!);\n        const savedFile = await FileSystem.writeFile({\n          path: fileName,\n          data: base64Data,\n          directory: Directory.Data\n        });\n      \n    };\n    return {\n        filepath: fileName,\n        webviewPath: photo.webPath\n      };\n\n    return {\n        photos,\n        takePhoto,\n    };\n}\n\nexport async function base64FromPath(path: string): Promise<string> {\n    const response = await fetch(path);\n    const blob = await response.blob();\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onerror = reject;\n      reader.onload = () => {\n        if (typeof reader.result === 'string') {\n          resolve(reader.result);\n        } else {\n          reject('method did not return a string')\n        }\n      };\n      reader.readAsDataURL(blob);\n    });\n}\n\nexport interface UserPhoto {\n    filepath: string;\n    webviewPath?: string;\n}\n\n"]},"metadata":{},"sourceType":"module"}