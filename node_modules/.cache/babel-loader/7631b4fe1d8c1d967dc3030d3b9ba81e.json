{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { Camera, CameraResultType, CameraSource } from \"@capacitor/camera\";\nimport { Directory } from \"@capacitor/filesystem\";\nexport function usePhotoGallery() {\n  _s();\n\n  const [photos, setPhotos] = useState([]);\n\n  const takePhoto = async () => {\n    const cameraPhoto = await Camera.getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n    const fileName = new Date().getTime() + \".jpeg\";\n    const newPhotos = [{\n      filepath: fileName,\n      webviewPath: cameraPhoto.webPath\n    }, ...photos];\n    setPhotos(newPhotos);\n  };\n\n  const savePicture = async (photo, fileName) => {\n    const base64Data = await base64FromPath(photo.webPath);\n    const savedFile = await FileSystem.writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: Directory.Data\n    }); // Use webPath to display the new image instead of base64 since it's\n    // already loaded into memory\n\n    return {\n      filepath: fileName,\n      webviewPath: photo.webPath\n    };\n  };\n\n  return {\n    photos,\n    takePhoto\n  };\n}\n\n_s(usePhotoGallery, \"S1/H7s/HYZ8eyl0DtDgy+0vpWeU=\");\n\nexport async function base64FromPath(path) {\n  const response = await fetch(path);\n  const blob = await response.blob();\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onerror = reject;\n\n    reader.onload = () => {\n      if (typeof reader.result === 'string') {\n        resolve(reader.result);\n      } else {\n        reject('method did not return a string');\n      }\n    };\n\n    reader.readAsDataURL(blob);\n  });\n}","map":{"version":3,"sources":["/Users/albertollamasgonzalez/Desktop/Learn X the Hard Way/ionic/photo-gallery/src/hooks/usePhotoGallery.ts"],"names":["useState","Camera","CameraResultType","CameraSource","Directory","usePhotoGallery","photos","setPhotos","takePhoto","cameraPhoto","getPhoto","resultType","Uri","source","quality","fileName","Date","getTime","newPhotos","filepath","webviewPath","webPath","savePicture","photo","base64Data","base64FromPath","savedFile","FileSystem","writeFile","path","data","directory","Data","response","fetch","blob","Promise","resolve","reject","reader","FileReader","onerror","onload","result","readAsDataURL"],"mappings":";;AAAA,SAASA,QAAT,QAAoC,OAApC;AAGA,SACIC,MADJ,EAEIC,gBAFJ,EAGIC,YAHJ,QAKO,mBALP;AAMA,SAAqBC,SAArB,QAAsC,uBAAtC;AAIA,OAAO,SAASC,eAAT,GAA2B;AAAA;;AAC9B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAc,EAAd,CAApC;;AACA,QAAMQ,SAAS,GAAG,YAAY;AAC1B,UAAMC,WAAW,GAAG,MAAMR,MAAM,CAACS,QAAP,CAAgB;AACtCC,MAAAA,UAAU,EAAET,gBAAgB,CAACU,GADS;AAEtCC,MAAAA,MAAM,EAAEV,YAAY,CAACF,MAFiB;AAGtCa,MAAAA,OAAO,EAAE;AAH6B,KAAhB,CAA1B;AAKA,UAAMC,QAAQ,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,OAAxC;AACA,UAAMC,SAAS,GAAG,CACd;AACIC,MAAAA,QAAQ,EAAEJ,QADd;AAEIK,MAAAA,WAAW,EAAEX,WAAW,CAACY;AAF7B,KADc,EAKd,GAAGf,MALW,CAAlB;AAOAC,IAAAA,SAAS,CAACW,SAAD,CAAT;AACH,GAfD;;AAgBA,QAAMI,WAAW,GAAG,OAAOC,KAAP,EAA2BR,QAA3B,KAAgE;AAChF,UAAMS,UAAU,GAAG,MAAMC,cAAc,CAACF,KAAK,CAACF,OAAP,CAAvC;AACA,UAAMK,SAAS,GAAG,MAAMC,UAAU,CAACC,SAAX,CAAqB;AAC3CC,MAAAA,IAAI,EAAEd,QADqC;AAE3Ce,MAAAA,IAAI,EAAEN,UAFqC;AAG3CO,MAAAA,SAAS,EAAE3B,SAAS,CAAC4B;AAHsB,KAArB,CAAxB,CAFgF,CAQhF;AACA;;AACA,WAAO;AACLb,MAAAA,QAAQ,EAAEJ,QADL;AAELK,MAAAA,WAAW,EAAEG,KAAK,CAACF;AAFd,KAAP;AAID,GAdH;;AAgBA,SAAO;AACHf,IAAAA,MADG;AAEHE,IAAAA;AAFG,GAAP;AAIH;;GAtCeH,e;;AAwChB,OAAO,eAAeoB,cAAf,CAA8BI,IAA9B,EAA6D;AAChE,QAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACL,IAAD,CAA5B;AACA,QAAMM,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;AACA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,IAAAA,MAAM,CAACE,OAAP,GAAiBH,MAAjB;;AACAC,IAAAA,MAAM,CAACG,MAAP,GAAgB,MAAM;AACpB,UAAI,OAAOH,MAAM,CAACI,MAAd,KAAyB,QAA7B,EAAuC;AACrCN,QAAAA,OAAO,CAACE,MAAM,CAACI,MAAR,CAAP;AACD,OAFD,MAEO;AACLL,QAAAA,MAAM,CAAC,gCAAD,CAAN;AACD;AACF,KAND;;AAOAC,IAAAA,MAAM,CAACK,aAAP,CAAqBT,IAArB;AACD,GAXM,CAAP;AAYH","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { isPlatform } from \"@ionic/react\";\n\nimport {\n    Camera,\n    CameraResultType,\n    CameraSource,\n    Photo,\n} from \"@capacitor/camera\";\nimport { Filesystem, Directory } from \"@capacitor/filesystem\";\nimport { Storage } from \"@capacitor/storage\";\nimport { Capacitor } from \"@capacitor/core\";\n\nexport function usePhotoGallery() {\n    const [photos, setPhotos] = useState<UserPhoto[]>([]);\n    const takePhoto = async () => {\n        const cameraPhoto = await Camera.getPhoto({\n            resultType: CameraResultType.Uri,\n            source: CameraSource.Camera,\n            quality: 100,\n        });\n        const fileName = new Date().getTime() + \".jpeg\";\n        const newPhotos = [\n            {\n                filepath: fileName,\n                webviewPath: cameraPhoto.webPath,\n            },\n            ...photos,\n        ];\n        setPhotos(newPhotos);\n    };\n    const savePicture = async (photo: CameraPhoto, fileName: string): Promise<Photo> => {\n        const base64Data = await base64FromPath(photo.webPath!);\n        const savedFile = await FileSystem.writeFile({\n          path: fileName,\n          data: base64Data,\n          directory: Directory.Data\n        });\n      \n        // Use webPath to display the new image instead of base64 since it's\n        // already loaded into memory\n        return {\n          filepath: fileName,\n          webviewPath: photo.webPath\n        };\n      };\n\n    return {\n        photos,\n        takePhoto,\n    };\n}\n\nexport async function base64FromPath(path: string): Promise<string> {\n    const response = await fetch(path);\n    const blob = await response.blob();\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onerror = reject;\n      reader.onload = () => {\n        if (typeof reader.result === 'string') {\n          resolve(reader.result);\n        } else {\n          reject('method did not return a string')\n        }\n      };\n      reader.readAsDataURL(blob);\n    });\n}\n\nexport interface UserPhoto {\n    filepath: string;\n    webviewPath?: string;\n}\n\n"]},"metadata":{},"sourceType":"module"}